{"actions":[{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionRunScript","parameters":{"script":"#coding: utf-8\nimport os\nimport io\nimport re\nimport ui\nimport sys\nimport shutil\nimport urllib\nimport zipfile\nimport tarfile\nimport workflow\nimport requests as r\nimport console\n\n# In[0]: Settings\n\ns = r.session()\ns.headers = {\n    'User-Agent': 'trenson.gilles@gmail.com'\n}\n\nuri = 'https:\/\/pypi.org\/pypi\/{package}\/json'\n\npython2packages = {\n    'pyx': '0.12'\n}\n\n# In[1]: Helper functions\n\ndef filter_release_version(release_details, version):\n    return next(iter(filter(lambda x: version in x.get('python_version'), release_details)), None)\n\ndef select_build(pypi_info, build, version='2'):\n    releases = pypi_info.get('releases', None)\n    release_versions = sorted([v for v in releases.keys() if build in v])\n    if releases:\n        release_details = releases.get(release_versions[-1], None)\n        if release_details:\n            specific_package = filter_release_version(release_details, version)\n            if specific_package == None:\n                specific_package = filter_release_version(release_details, 'source')\n            return specific_package\n    return None\n\ndef select_latest(pypi_info, version='2.7'):\n    latest_release = pypi_info['info']['version']\n    releases = pypi_info.get('releases', None)\n    if releases:\n        latest_release_details = releases[latest_release]\n        specific_package = filter_release_version(latest_release_details, version)\n        if specific_package == None:\n             specific_package = filter_release_version(latest_release_details, 'source')\n        return specific_package\n    return None\n\n# In[2]: UI Class\n\nclass TextFieldDelegate (object):\n\tdef textfield_did_begin_editing(self, textfield):\n\t\ttextfield.text_color = 'black'\n\nclass InputView(ui.View):\n\t\n\tdef __init__(self):\n\t\t# Size\n\t\tself.width = 300\n\t\tself.height = 80\n\t\t# Attributes\n\t\tself.name = 'Install'\n\t\tself.tint_color = 'white'\n\t\tself.background_color = '#545659'\n\t\tself.border_width = 2\n\t\tself.border_color = '#545659'\n\t\t# Initialise\n\t\tself.initialise()\n\t\t# Add controls\n\t\tself.add_controls()\n\t\n\tdef initialise(self):\n\t\t# Add label\n\t\tlabel = ui.Label(text='pip install')\n\t\tlabel.name = 'label_1'\n\t\tlabel.frame = (15, self.height * 0.5 - 20, 90, 40)\n\t\tlabel.flex = 'TB'\n\t\tlabel.font = ('<system-bold>', 18)\n\t\tlabel.text_color = '#FAFAFA'\n\t\tself.add_subview(label)\n\t\ttextfield = ui.TextField()\n\t\ttextfield.frame = (105, self.height * 0.5 - 20, 185, 40)\n\t\ttextfield.placeholder = 'python package'\n\t\ttextfield.flex = 'TB'\n\t\ttextfield.autocapitalization_type = ui.AUTOCAPITALIZE_NONE\n\t\ttextfield.clear_button_mode = 'while_editing'\n\t\ttextfield.action = self.request_download\n\t\ttextfield.delegate = TextFieldDelegate()\n\t\tself.add_subview(textfield)\n\t\n\tdef add_controls(self):\n\t\t# Add button\n\t\tsearch_button = ui.ButtonItem(title='Search')\n\t\tself.right_button_items = [search_button]\n\t\t# Refresh view\n\t\tself.set_needs_display()\n\t\n\t@ui.in_background\n\tdef request_download(self, sender):\n\t\t# Check if valid package name\n\t\tpkg = sender.text.lower()\n\t\t\n\t\tresponse = s.get(uri.format(package=pkg))\n\n\t\tif response.status_code == 200:\n\t\t\tpypi_info = response.json()\n\t\t\tif pkg in python2packages.keys():\n\t\t\t\tlatest_release = select_build(pypi_info, build=python2packages[pkg])\n\t\t\telse: \n\t\t\t\tlatest_release = select_latest(pypi_info, version='2.7')\n\t\t\t\t# Check package type\n\t\t\t\tpackage_type = latest_release.get('packagetype', None)\n\t\t\t\t# Binary distribution - C-bindings compiled\n\t\t\t\tif package_type == 'bdist_wheel': \n\t\t\t\t\tconsole.alert('Wheel - I don\\'t know what to do with this')\n\t\t\t\t# Source distribution - C-bindings not compiled yet\n\t\t\t\telif package_type == 'sdist': \n\t\t\t\t\tpackage_uri = latest_release.get('url', None) \n\t\t\t\t\tfilename = os.path.basename(package_uri)\n\t\t\t\t\textension = os.path.splitext(package_uri)[1]\n\t\t\t\t\tdownload = s.get(package_uri, allow_redirects=True)\n\t\t\t\t\tdownload_object = io.BytesIO(download.content)\n\t\t\t\t\t# Decompress archive\n\t\t\t\t\tif '.tar.gz' in filename:\n\t\t\t\t\t\twith tarfile.open(fileobj=download_object, mode='r') as archive:\n\t\t\t\t\t\t\tpackage_folder = re.compile(r'[^\/]*?\/'+re.escape(pkg)+r'[\/$]')\n\t\t\t\t\t\t\tselection = [tarinfo for tarinfo in archive.getmembers() if package_folder.match(tarinfo.name)]\n\t\t\t\t\t\t\tbase_path = selection[0].name.split('\/')[0]\n\t\t\t\t\t\t\tfor tarinfo in selection:\n\t\t\t\t\t\t\t\ttarinfo.name = tarinfo.name[len(base_path) + 1:]\n\t\t\t\t\t\t\tarchive.extractall(members=selection, path=os.path.expanduser('~\/Documents\/site-packages'))\n\t\t\t\t\t\tconsole.hud_alert('Package installed!')\n\t\t\t\t\t\tdownload_object.close()\n\t\t\t\t\t\tself.close()\n\t\t\t\t\t\tworkflow.stop()\n\t\t\t\t\telif extension == '.zip':\n\t\t\t\t\t\twith zipfile.ZipFile(file=download_object, mode='r') as archive:\n\t\t\t\t\t\t\tpackage_folder = re.compile(r'.*?\/('+re.escape(pkg)+r'(?:\/.*$|$))')\n\t\t\t\t\t\t\tselection = [name for name in archive.namelist() if package_folder.match(name)]\n\t\t\t\t\t\t\tfor member in selection:\n\t\t\t\t\t\t\t\tfilename = package_folder.match(member).group(1)\n\t\t\t\t\t\t\t\tpath = os.path.join(os.path.expanduser('~\/Documents\/site-packages'), filename)\n\t\t\t\t\t\t\t\tsource = archive.open(member)\n\t\t\t\t\t\t\t\t# Check if path exists\n\t\t\t\t\t\t\t\tif not os.path.exists(os.path.dirname(path)):\n\t\t\t\t\t\t\t\t\tos.makedirs(os.path.dirname(path))\n\t\t\t\t\t\t\t\ttarget = open(path, 'wb')\n\t\t\t\t\t\t\t\twith source, target:\n\t\t\t\t\t\t\t\t\tshutil.copyfileobj(source, target)\n\t\t\t\t\t\tconsole.hud_alert('Package installed!')\n\t\t\t\t\t\tdownload_object.close()\n\t\t\t\t\t\tself.close()\n\t\t\t\t\t\tworkflow.stop()\n\t\telse:\n\t\t\tsender.text_color = '#c7180c'\n\t\t\tconsole.hud_alert('Package not found')\t\t\n\ninput_view = InputView()\ninput_view.present('sheet', hide_title_bar=True)\n","ui":"[\n  {\n    \"nodes\" : [\n      {\n        \"nodes\" : [\n\n        ],\n        \"frame\" : \"{{15, 20}, {85, 40}}\",\n        \"class\" : \"Label\",\n        \"attributes\" : {\n          \"flex\" : \"H\",\n          \"name\" : \"command\",\n          \"frame\" : \"{{75, 24}, {150, 32}}\",\n          \"uuid\" : \"83DE038F-1F82-4346-9710-DE2348468245\",\n          \"class\" : \"Label\",\n          \"alignment\" : \"left\",\n          \"text\" : \"pip install\",\n          \"font_size\" : 18,\n          \"font_name\" : \"<System>\"\n        },\n        \"selected\" : false\n      },\n      {\n        \"nodes\" : [\n\n        ],\n        \"frame\" : \"{{100, 20}, {185, 40}}\",\n        \"class\" : \"TextField\",\n        \"attributes\" : {\n          \"uuid\" : \"E77CB3F3-5E2A-44D1-B5ED-00E370C8EF32\",\n          \"font_size\" : 18,\n          \"frame\" : \"{{50, 24}, {200, 32}}\",\n          \"action\" : \"\",\n          \"alignment\" : \"left\",\n          \"autocorrection_type\" : \"default\",\n          \"placeholder\" : \"package name\",\n          \"font_name\" : \"<System>\",\n          \"spellchecking_type\" : \"default\",\n          \"class\" : \"TextField\",\n          \"name\" : \"package\",\n          \"flex\" : \"WH\"\n        },\n        \"selected\" : false\n      }\n    ],\n    \"frame\" : \"{{0, 0}, {300, 80}}\",\n    \"class\" : \"View\",\n    \"attributes\" : {\n      \"name\" : \"InputView\",\n      \"custom_class\" : \"\"\n    },\n    \"selected\" : false\n  }\n]"}}]}