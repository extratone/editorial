{"actions":[{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionRunScript","parameters":{"script":"#coding: utf-8\nimport workflow\nimport json\nimport os\nimport editor\nimport console\nimport ui\n\ndef installed_workflows():\n\t\"\"\"Sequence of locally installed workflows (JSON from Commands.edcmd)\"\"\"\n\tpath = os.path.join(editor.get_workflows_path(), 'Commands.edcmd')\n\tif not os.path.exists(path):\n\t\treturn []\n\t\t\n\tworkflows = []\n\twith open(path, 'r') as file:\n\t\tworkflows = json.load(file)\n\t\t\n\treturn workflows\n\t\n\t\ndef workflow_data_path(workflow):\n\treturn os.path.join(editor.get_workflows_path(), workflow['filename'])\n\t\n\t\ndef is_convertible_to_module(workflow):\n\t\"\"\"Return True if workflow does contain exactly one Run Python Script action otherwise False\"\"\"\n\tpath = workflow_data_path(workflow)\n\tif not os.path.exists(path):\t\n\t\treturn False\n\n\twith open(path, 'r') as file:\n\t\tdata = json.load(file)\n\t\n\tif data.get('actions', None) == None:\n\t\treturn False\n\n\tactions = data.get('actions')\n\t\n\tscript_actions = [x for x in actions if x['class'] == 'WorkflowActionRunScript']\n\tif len(script_actions) != 1:\n\t\treturn False\n\t\t\t\t\t\t\n\tscript_action = script_actions[0]\n\tif script_action.get('parameters', None) == None:\n\t\treturn False\n\t\t\n\tparameters = script_action.get('parameters')\n\treturn parameters.get('script', None) != None\n\t\n\t\ndef convert_workflow_to_module(workflow, filename):\n\tprint 'Converting \\'%s\\' workflow to module' % workflow['title']\n\tif os.path.splitext(filename)[1] != '.py':\n\t\tfilename = filename + '.py'\n\t\t\n\tdir = os.path.join(os.path.expanduser('~\/Documents'), 'site-packages')\n\tif not os.path.exists(dir):\n\t\tprint 'Creating site-packages directory'\n\t\tos.mkdir(dir)\n\t\t\n\tprint 'Getting workflow script ...'\n\tdata_path = workflow_data_path(workflow)\n\twith open(data_path, 'r') as file:\n\t\tdata = json.load(file)\t\n\t\t\n\tactions = data['actions']\t\n\tscript_actions = [x for x in actions if x['class'] == 'WorkflowActionRunScript']\n\tscript = script_actions[0]['parameters']['script']\n\t\t\n\tpath = os.path.join(dir, filename)\n\tprint 'Writing module ...'\n\twith open(path, 'w') as file:\n\t\tfile.write(script)\n\t\t\n\tprint 'Done, you can now \\'import %s\\'' % os.path.splitext(filename)[0]\n\t\t\n\t\nclass WorkflowPickerView(ui.View):\n\tdef __init__(self, workflows):\n\t\tself.workflows = workflows\n\t\tself.name = 'Select Workflow'\n\t\t\n\t\tds = ui.ListDataSource([x['title'] for x in workflows])\n\t\tds.action = self.did_select_workflow\n\t\t\n\t\tself.tableview = ui.TableView()\n\t\tself.tableview.frame = self.bounds\n\t\tself.tableview.flex = 'WH'\n\t\tself.tableview.data_source = ds\n\t\tself.tableview.delegate = ds\n\t\tself.add_subview(self.tableview)\n\t\t\n\t\tcancel_item = ui.ButtonItem(title='Cancel', action=self.cancel)\n\t\tself.left_button_items = [cancel_item]\n\t\t\n\tdef cancel(self, sender):\n\t\tself.navigation_view.close()\n\t\t\n\tdef did_select_workflow(self, sender):\n\t\tworkflow = self.workflows[sender.selected_row]\n\t\tview = ModuleNameView(workflow)\n\t\tself.navigation_view.push_view(view)\n\t\t\n\t\t\nclass ModuleNameView(ui.View):\n\tdef __init__(self, workflow):\n\t\tself.workflow = workflow\n\t\tself.name = 'Module Name'\n\t\t\n\t\tself.label = ui.Label()\n\t\tself.label.frame = ( 6, 6, self.bounds[3] - 12, 32)\n\t\tself.label.flex = 'W'\n\t\tself.label.text = 'Enter module file name'\n\t\tself.add_subview(self.label)\n\t\t\n\t\tself.textfield = ui.TextField()\n\t\tself.textfield.frame = ( 6, 46, self.bounds[3] - 12, 32 )\n\t\tself.textfield.flex = 'W'\n\t\tself.textfield.delegate = self\n\t\tself.add_subview(self.textfield)\n\t\t\n\t\ttitle = self.workflow['title']\n\t\tmodule_prefix = 'Module: '\n\t\tif title.startswith(module_prefix):\n\t\t\tself.textfield.text = title[len(module_prefix):]\n\t\t\n\t\tconvert_item = ui.ButtonItem(title='Convert', action=self.convert)\n\t\tself.right_button_items = [convert_item]\n\t\t\n\t\tself.textfield.begin_editing()\n\t\t\t\t\n\tdef textfield_should_return(self, textfield):\n\t\tvalid, _ = self.validate_module_filename()\n\t\tif valid:\n\t\t\ttextfield.end_editing()\n\t\t\tself.convert(None)\n\t\t\treturn True\t\t\t\n\t\treturn False\n\t\t\n\tdef module_filename(self):\n\t\treturn self.textfield.text.strip()\n\t\t\n\tdef validate_module_filename(self):\n\t\tfilename = self.module_filename()\n\t\tif len(filename) == 0:\n\t\t\tconsole.hud_alert('Enter filename', 'error', 1.0)\n\t\t\treturn (False, filename)\n\t\treturn (True, filename)\n\t\t\n\t@ui.in_background\n\tdef convert(self, sender):\n\t\tvalid, filename = self.validate_module_filename()\n\t\tif not valid:\n\t\t\treturn\n\t\t\t\n\t\tself.navigation_view.close()\n\t\tconvert_workflow_to_module(self.workflow, filename)\n\n\ndef main():\n\tconvertible_workflows = [x for x in installed_workflows() if is_convertible_to_module(x)]\n\tif len(convertible_workflows) == 0:\n\t\tconsole.alert('Error', 'No convertible workflows found. Convertible workflow must contain exactly one Run Python Script action.', 'OK')\n\t\tworkflow.stop()\n\n\tpicker = WorkflowPickerView(convertible_workflows)\n\tnav = ui.NavigationView(picker)\n\tnav.present(style='sheet', hide_title_bar=True)\n\t\n\t\nmain()\n","ui":"[{\"frame\":\"{{0, 0}, {540, 575}}\",\"class\":\"View\",\"nodes\":[],\"attributes\":{\"custom_class\":\"\",\"enabled\":true,\"background_color\":\"RGBA(1.000000,1.000000,1.000000,1.000000)\",\"border_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"tint_color\":\"RGBA(0.000000,0.478000,1.000000,1.000000)\",\"flex\":\"\"}}]"}}]}