{"actions":[{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Planets.py","class":"WorkflowActionRunScript","parameters":{"script":"'''\nDATA:\t\t\t\t\n\t           Rad   Mass(kg) Dens   Abo  Vo     Rot(days)\nMercury      2440  3.30e23  5.43  .11  -1.9    58.6\nVenus        6052  4.87e24  5.24  .65  -4.4    -243 \nEarth        6378  5.97e24  5.52  .30   -      0.99\nMars         3397  6.42e23  3.93  .15  -2.0    1.03\nJupiter     71492  1.90e27  1.33  .52  -2.7    0.41\nSaturn      60268  5.68e26  0.69  .47   0.7    0.45\nUranus      25559  8.68e25  1.32  .51   5.5   -0.72\nNeptune     24766  1.02e26  1.64  .41   7.8    0.67\nPluto        1150  1.27e22  2.06  .55  13.6   -6.39  (z)\n'''\n\n# I googled for a way to get the execution time for a python script.\n# http:\/\/stackoverflow.com\/questions\/1557571\/how-to-get-time-of-a-python-program-execution\n\n##BEGIN BORROWED CODE##\nimport atexit\nfrom time import clock\n\ndef secondsToStr(t):\n    return \"%d:%02d:%02d.%03d\" % \\\n        reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],\n            [(t*1000,),1000,60,60])\n\nline = \"=\"*40\ndef log(s, elapsed=None):\n    print line\n    print secondsToStr(clock()), '-', s\n    if elapsed:\n        print \"Elapsed time:\", elapsed\n    print line\n    print\n\n\ndef endlog():\n    end = clock()\n    elapsed = end-start\n    log(\"End Program\", secondsToStr(elapsed))\n\ndef now():\n    return secondsToStr(clock())\n\nstart = clock()\natexit.register(endlog)\nlog(\"Start Program\")\n##END BORROWED CODE##\n\n#I googled how to put comma separators in numbers\n#http:\/\/stackoverflow.com\/questions\/1823058\/how-to-print-number-with-commas-as-thousands-separators\n#x = '{:,}'.format(238383)\n#print x\n\n### BORROWED CODE\n## #http:\/\/stackoverflow.com\/questions\/1823058\/how-to-print-number-with-commas-as-thousands-separators\n# Adds commas to floats\n'''\ndef float2comma(f):\n    s = str(abs(f)) # Convert to a string\n    decimalposition = s.find(\".\") # Look for decimal point\n    if decimalposition == -1:\n        decimalposition = len(s) # If no decimal, then just work from the end\n    out = \"\" \n    for i in range(decimalposition+1, len(s)): # do the decimal\n        if not (i-decimalposition-1) % 3 and i-decimalposition-1: out = out+\",\"\n        out = out+s[i]      \n    if len(out):\n        out = \".\"+out # add the decimal point if necessary\n    for i in range(decimalposition-1,-1,-1): # working backwards from decimal point\n        if not (decimalposition-i-1) % 3 and decimalposition-i-1: out = \",\"+out\n        out = s[i]+out      \n    if f < 0:\n        out = \"-\"+out\n    return out\n'''\n### END BORROWED CODE\n\n\n#Module\nimport math\n\n\n#Integer \nlesson_number = 1\n\n\n#String\ntitle = \"Calculate the Area of a Planet\\n\"\n\n#\\n is like hitting the RETURN key. A backslash is an escape character.\n\n#Variables\npie = math.pi \ne = math.e\n\n\n#radius_of_my_head = None\n#planet_to_head_ratio = None\n# commented this code out for possinle later use.\n\nkm = 'kilometers'\nabbr = '(km)' \n\n#Character\n\n#Dictionaries\nmercury = {'name':'Mercury','radius':2440,'units':km,'abbr':abbr}\nvenus = {'name':'Venus','radius':6052,'units':km,'abbr':abbr}\nearth = {'name':'Earth','radius':6378,'units':km,'abbr':abbr}\nmars = {'name':'Mars','radius':3397,'units':km,'abbr':abbr}\njupiter = {'name':'Jupiter','radius':71492,'units':km,'abbr':abbr}\nsaturn = {'name':'Saturn','radius':60268,'units':km,'abbr':abbr}\nuranus = {'name':'Uranus','radius':25559,'units':km,'abbr':abbr}\nneptune = {'name':'Neptune','radius':24766,'units':km,'abbr':abbr}\npluto = {'name':'Pluto','radius':1150,'units':km,'abbr':abbr}\n\nsun = {'name':'Sun','radius':695000,'units':km,'abbr':abbr}\nmoon = {'name':'Moon','radius':1738,'units':km,'abbr':abbr}\n\n# How to add to dictionary\n#list['new_key']='new_value'\n\n\n#List\nplanet = [mercury,venus,earth,mars,jupiter,saturn,uranus,neptune,pluto]\nbody = [sun,moon]\n\n\n#Function\ndef Calculate_Volume(planet_arg):\n\tvolume = 4 *(pie * math.pow(planet_arg['radius'],2))\n\tprint 'The approximate volume of ' + planet_arg['name'] + ', regarding the atomispheric layers' +' is ' + str(volume) + ' ' + planet_arg['units'] + planet_arg['abbr'] + '^3'\n\treturn volume\n\n# V = (4\/3)*pi*r^2\n\n\nprint \"Lesson \" + str(lesson_number)\nprint title\nCalculate_Volume(mercury)\nCalculate_Volume(planet[8])\nCalculate_Volume(earth)\n\n\ndef Get_Radius(planet_arg):\n\tprint 'The radius of ' + planet_arg['name'] + ' is ' + str(planet_arg['radius']) + ' ' + planet_arg['units'] + planet_arg['abbr']\n\treturn planet_arg['radius']\n\n\ndef Set_Mass(coefficient,power):\n\tmass = str(coefficient) + 'e' + str(power)\n\treturn mass\n\t\n\t\ndef Get_Mass(planet_arg):\n\tprint 'The mass of ' + planet_arg['name'] + ' is ' + planet_arg['mass']\n\treturn planet_arg['mass']\n\t\n\t\nmercury['mass']= Set_Mass(3.30,23)\nvenus['mass']= Set_Mass(4.87,24)\nearth['mass']= Set_Mass(5.97,24)\nmars['mass']= Set_Mass(6.42,23)\njupiter['mass']= Set_Mass(1.90,27)\nsaturn['mass']= Set_Mass(5.68,26)\nuranus['mass']= Set_Mass(8.68,25)\nneptune['mass']= Set_Mass(1.09,26)\npluto['mass']= Set_Mass(1.27,22)\n\n\nGet_Radius(pluto)\nGet_Radius(sun)\nGet_Mass(earth)\n\n\n\n\n\n\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionStopWorkflow","parameters":{"showHUD":false,"HUDTitle":"To run an example, drag it above the stop action"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"View Tutorial?","class":"WorkflowActionShowAlert","parameters":{"button2Value":{"type":"advancedText","tokenRanges":{},"text":"no"},"button1Title":"Yes","button1Value":{"type":"advancedText","tokenRanges":{},"text":"yes"},"showCancelButton":false,"title":"","message":{"type":"advancedText","tokenRanges":{},"text":"Would you like to view the programming tutorial?"},"button3Title":"","button3Value":{"type":"advancedText","tokenRanges":{},"text":""},"button2Title":"No"}},{"pauseBeforeRunning":false,"subActions":[{"customTitle":"Help","colorLabel":5,"pauseWithoutShowingParameters":false,"subActions":[{"pauseBeforeRunning":false,"colorLabel":2,"pauseWithoutShowingParameters":false,"customTitle":"Markdown Help","class":"WorkflowActionStoreVariable","parameters":{"name":"mkd_help","value":{"type":"advancedText","tokenRanges":{},"text":"Title: \"Computer Programming Made **Actually** Simple\"\n\nA computer program is a recipe for a computer. It looks something like...\n\n\timport editor\n\timport console\n\timport os\n\timport re\n\timport sys\n\timport codecs\n\timport workflow\n\tfrom StringIO import StringIO\n\t\n\ttheme = editor.get_theme()\n\tworkflow.set_variable('CSS', workflow.get_variable('CSS Dark' if theme == 'Dark' else 'CSS Light'))\n\t\n\tp = editor.get_path()\n\tterm = workflow.get_variable('Search Term')\n\tpattern = re.compile(re.escape(term), flags=re.IGNORECASE)\n\tfrom urllib import quote\n\tdir = os.path.split(p)[0]\n\tvalid_extensions = set(['.txt', '.md', '.markd', '.text', '.mdown', '.taskpaper'])\n\thtml = StringIO()\n\tmatch_count = 0\n\tfor w in os.walk(dir):\n\t\tdir_path = w[0]\n\t\tfilenames = w[2]\n\t\tfor name in filenames:\n\t\t\tfull_path = os.path.join(dir_path, name)\n\t\t\text = os.path.splitext(full_path)[1]\n\t\t\tif ext.lower() not in valid_extensions:\n\t\t\t\tcontinue\n\t\t\tfound_snippets = []\n\t\t\ti = 0\n\t\t\ttry:\n\t\t\t\twith codecs.open(full_path, 'r', 'utf-8') as f:\n\t\t\t\t\tfor line in f:\n\t\t\t\t\t\tfor match in re.finditer(pattern, line):\n\t\t\t\t\t\t\tstart = max(0, match.start(0) - 100)\n\t\t\t\t\t\t\tend = min(len(line)-1, match.end(0) + 100)\n\t\t\t\t\t\t\tsnippet = (line[start:match.start(0)],\n\t\t\t\t\t\t\t           match.group(0),\n\t\t\t\t\t\t\t           line[match.end(0):end],\n\t\t\t\t\t\t\t           match.start(0) + i,\n\t\t\t\t\t\t\t           match.end(0) + i)\n\t\t\t\t\t\t\tfound_snippets.append(snippet)\n\t\t\t\t\t\ti += len(line)\n\t\t\texcept UnicodeDecodeError, e:\n\t\t\t\tpass\n\t\t\tif len(found_snippets) > 0:\n\t\t\t\tmatch_count += 1\n\t\t\t\troot, rel_path = editor.to_relative_path(full_path)\n\t\t\t\ted_url = 'editorial:\/\/open\/' + quote(rel_path.encode('utf-8')) + '?root=' + root\n\t\t\t\thtml.write('<h2><a href=\"' + ed_url + '\">' + name + '<\/a><\/h2>')\n\t\t\t\tfor snippet in found_snippets:\n\t\t\t\t\tstart = snippet[3]\n\t\t\t\t\tend = snippet[4]\n\t\t\t\t\tselect_url = 'editorial:\/\/open\/' + quote(rel_path.encode('utf-8')) + '?root=' + root\n\t\t\t\t\tselect_url += '&selection=' + str(start) + '-' + str(end)\n\t\t\t\t\thtml.write('<a class=\"result-box\" href=\"' + select_url + '\">' + snippet[0] + '<span class=\"highlight\">' + snippet[1] + '<\/span>' + snippet[2] + '<\/a>')\n\tif match_count == 0:\n\t\thtml.write('<p>No matches found.<\/p>')\n\t\n\tworkflow.set_output(html.getvalue())\n\n\nThe computer reads the recipe and you get a game like **Angry Birds**, computer software like **Microsoft Office**, or a website like **Youtube**.\n\n# USER\nA person who uses a program is called a **user**.\n\n# DEVELOPER\nA person who creates a program is called a **developer**.\n\n# VARIABLES\nRecipes have various ingredents and various directions for using the ingedients. The various ingredients of a computer program are called **variables**.\n\nVariables are names like **nouns**. Your recipe might require an *apple* and some *sugar* and a *blender*. These would be variables in your program.\n\n# STATEMENTS\nThe various directions are called **statements**.\n\nComputer are not naturally smart. If I told a computer to cut an apple, I would have to tell it how, step-by-step. To save time, I would create something called a *function*.\n\n# FUNCTION\n\nA **function** is a **group of statements**. Some people see them as machines, because functions do something to variables. They are usually named like **verbs**.\n\nFor instance, if I put a strawberry into a blender function, the blender would blend and return a strawberry smoothie. So, I could type Blend() and the computer would know what to do.\n\nLet's see an example\n\n\t\/\/VARIABLES\n\tvar salt;\n\tvar water;\n\tvar bowl;\n\tvar temperature;\n\tvar pot;\n\t\n\t\/\/FUNCTIONS\n\t\n\tfunction measure()\n\t{\n\t\tsome statements here\n\t}\n\t\n\tfunction pour()\n\t{\n\t\tsome statements here\n\t}\n\t\n\tfunction boil()\n\t{\n\t\tsome statements here\n\t}\n\t\n\tfunction stir()\n\t{\n\t\tsome statements here\n\t}\n\t\n\tfunction setTemperature()\n\t{\n\t\tsome statements here\n\t}\n\t\n\t\n\nMy variables are:\n- Salt\n- Water\n- Bowl\n- Pot\n- Temperature\n\nEven though a bowl and temperature are not food items, they are variables, because they are nouns.\n\nMy functions are:\n- Measure()\n- Pour()\n- Boil()\n- Stir()\n- SetTemperature()\n\nThe Measure() function measures something. Looking at our ingredients\/variables, we might measure water. We could measure temperature also (although you  don't measure temperature with a measuring cup).\n\nThe Pour() function would pour something. We could pour water. We could pour water into a pot or into a bowl.\n\nThe Boil() function would boil something. If we put water into a boil function, it would be boiled. We could also boil milk.\n\nThe Stir() function stirs something. We could stir water in a bowl.\n\nThe SetTemperature() function would set a temperature. If we had a stove variable, we could set the temperature of the stove.\n\nAs you can see, some functions can be used on many variables. I can bake a cake, or I can bake a pie. I can boil water or milk.\n\nIn computer programming, the things that can be **substituted** in and out of a function are called **arguments\/parameters**. They work just like the arguments in Algebra:\n\n\tf(x) = 2x + 1\n\tf(1) = 2*1 + 1\n\tf(2) = 2*2 + 1\n\nLet's say you wanted to make a game. First you would create all of your characters and game objects as variables. Next you would create some functions for your characters and game objects.\n\nYou might create a function called Jump(), so that when you type Jump(), an animatioin would play and start moving the character in the up direction.\n\nOr, you might create a function called Run() which would move the character to the left or right while playing an animation.\n\nPerhaps Apple inc. uses functions names Shutdown() and Startup() and OpenAppStore() in their coding of IOS. Perhaps!\n\n# ALGORITHMS\n\nWhen people write recipes, there is a **certain order** in which you are supposed to cook or prepare the food or supplies. In computer programming, it is called an **algorithm**.\n\nFor instance, you might tell the computer to gather all of the supplies first, and then you tell it to do stuff with those supplies. One main reason games or apps lag is because they have bad algorithms.\n\nFor example, I might tell the computer to Cut() and Butter() the bread after I tell it to Eat() the bread. The computer cannot cut and butter bread that it has already eaten, so you get an **error**.\n\nAlthough a bad algorithm might not give you an error, it could take too much time, when there is an easier way. \n\nI once saw a computer program that was a page long, and all it did was make an object follow the mouse cursor. I did the same thing with one line of code, and it was faster!\n\n# DEBUGGING\n\nSay that you finish your game or app and run it, and nothing works! That means that somewhere, there is a mistake in your code. The process of **correcting errors** in your code is called **debugging**.\n\n# SOURCE CODE\n\nIn compter programming, your **entire recipe** with its ingredients and instructions is called your **source code**.\n\nA lot of programmers keep their source code a secret, like a secret recipe. Programs that are not secret are called **Open Source** programs.\n\n# SYNTAX\n\nThere are different types of langauges you can write in, and each language has its own grammar rules. The **grammar rules** of computer programming is called the **syntax** of the language.\n\nIf your syntax is not correct, the computer will not understand what you are saying. In some languages they use a simicolon to end a statement, just like we use a period to end a sentence. Different syntax.\n\n# PROGRAMMING STYLE\nYour programming style is the way in which the developer **styles their source code**, usually according to a set of rules or standards.\n\nJust as there are various styles for writing poems , there are different styles to writing programs. \n\nSome rules a style might follow are:\n\n- Indent all function code\n- capitalize the first letter in a function name\n- white-space between statements.\n\nBy default, the Python programming language forces you to indent function code  (for style purposes). Styles are sometimes chosen for readability (by other developers).\n\n\n# IDE\n\nIf you want to write a computer program, you need something to **write it in**.  You use a word processor to write essays, and you write programs in an IDE (**Integrated Development Environment**).\n\nIt is an environment  that you develop in! Develop what? Develope programs -- those super tasty code recipe masterpieces! **XCODE** is Apple's IDE. You make iPhone apps in XCODE and Android apps in **Eclipse**.\n\n# MEMORY\n\nComputers, much like humans, can only remember so much at one time. Anything stored in the memory of the computer can be accessed quicker than something that isn't.\n\nMost data\/directions go into the **RAM** (Random Access Memory) part of the computer brain. Another place information is stored is in the **ROM** (Read-only memory). I am no nerosurgeon so I will stop there. All you need to know is that you shouldn't overload the computer with instructions when it can only remember so much.\n\nI wrote a program that made my computer calculate the ccurrent Year, Month, Day, Hour, Minute, and Second 20,000 times fast. My computer fan started humming\n\n# FLOW CONTROL\n\nNo one wries a recipe that says:\n\n*\" Do this, do this, do this, do this, do that, done!\" If you write intructions back to back like that, you are not being specific, and things could go wrong.\"*\n\nFor example, You tell the computer to bake the cake, then you tell it to stop baking, then you tell it to take the cake out of the oven, then you tell it to let the cake cook. Finally you tell it to eat.\n\nHowever, how long is it supposed to bake? And how can you tell when it is ready? How long to let it cool? What temperature should it be when it is cool? \n\nYour recipe has to have a flow. It has to have control flow.\n\n# CONDITIONAL STATMENTS\n\nThe way you **create flow** in computer programming is by using **conditional statments**.\n\nA conditional statement is a statment like:\n\n*\"If the temperature is 100 degrees, take the cake out of the oven.\" Otherwise, if it is 90 degrees, leave it in the oven. If it is anything else..\"*\n\nThe way you say **if** in computer programming is with the \"if\" keyword. the way you say *otherwise* is **else if**.\" The way you say *if anything else* is **else**.\n\nHere is an example program in the Python language that aturally works. In Python, \"def\" means \"define a functiion.\" Temperature is the variable:\n\n\tdef BakeCake():\n\t\tprint \"Baking the cake Sire...\"\n\t\n\tdef TakeCakeOutOfOven():\n\t\tprint \"Taking the cake out of the oven Sire...\"\n\t\t\n\tdef LeaveCakeInOven():\n\t\tprint \"Leaving the cake in the oven Sire...\"\n\t\t\n\tdef EatTheCake():\n\t\tprint \"Eating his delcious scrumptious cake...\"\n\t\n\tdef BarkLikeAStarvingDog():\n\t\tprint \"WOOF! WOOF! WOOF!!\"\n\t\t\n\ttemperature = 0\n\t\n\tif (temperature==100):\n\t\tTakeCakeOutofOven()\n\t\t\n\telif (temperature==90):\n\t\tLeaveCakeInOven()\n\t\n\telse:\n\t\tBarkLikeAStarvingDog()\n\t\t\n\traw_input(\"Press Enter to leave this terrible place...\")\n\n# LOOPS\n\nA **loop** is how you make a computer **repeat** an instruction. You could make it repeat a whole function or just a single statement.\n\nThere are two main types of loop statements. There is the **while loop** and the **for loop**.\n\n## While Loop\n\nA while loop is like saying, \"**As long as**..\" Short for \"as long is\" is *while.*\n\nIf you have a temperature variable, temperature can chance. You might say, \"While the temperature is 90 degrees, keep the cake in the oven.\" As long as the temperature is 90 we will keep it in the oven.\n\n## For Loop\n\nA for loop is like saying, \"**Until**...\" The computer will do something until something else happens. If we have a cake variable and a temperature variable, we could Bake() the cake until the temperature is 100 degrees. Once the cake is 100 degrees, we stop baking it.\n\n# DATA TYPES\n\nAn apple is a type of fruit. A pecan is  type of nut. A male is a type of person. When you give a **variable** a **type** in computer programming, you are giving it a **data type**.\n\nThe basic types of variables in a computer program are the:\n\n- string\n- integer\n- float\n- character\n- boolean\n- array\n\n## String\n\nA string is a string of characters. Strings are like **words** in English.\n\nStrings are usually put in double or single quotes:\n\n- \"This is a string\"\n- 'This is a string also'\n\nThe spaces between words count as a character too!\n\n## Integer\n\nAn **Integer** is a **number**\n\n- 1\n- 345\n- 9043\n\n## Float\n\nA **Float** is a number also, but it is a **number with decimals**\n\n- 1.5\n- 345.67\n- 1924.034\n\n## Character\n\nA **character** is a **single letter number symbol**:\n\n- \"a\"\n- \"7\"\n- \"@\"\n\n## Boolean\n\nA Boolean is like a **switch**. You can turn a variable ON or you can turn a variable OFF. ON = TRUE in computer programming. OFF = FALSE. If you had a variable named *switch*, you could turn it OFF\/FALSE.\n\nThe on\/off switches in your settings make use of Boolean variables, I would suppose.\n\n- light_on = True\n- door_open = False\n\n## Array\/List\n\nAn **array** is a **list** of items. If you had a variable called *basketOfFruit*, inside of it you could put an array of fruit. An array is a variable that can contain other variables or data types.\n\n## Tuple \nA **tuple** is a list that cannot be changed (it is **immutable**). \n\n## Dictionary\/Associative Array\n\nA **dictionary** is an **array** that pairs each **variable with a key**. The only way you can access each variable is by using the appropriate key. They can be used to store properties of values.\n\n# CLASSES\n\nWhat if you wanted to make your own data types? **Custom data types** are made using classes. Classes are used to classify variables.\n\nClasses allow you to give your variables **characteristics**. For example, all humans share certain characteristics. So, you could create a human calss and put some male and female variables in it.\n\nYou can also create some functions for your human class like, Walk(), Run(), Speak(), Think(), etc.\n\n# SUPERCLASSES AND SUBCLASSES\n\nSometimes classes can be part of other classes\n\n\t- HumanClasss\n\t\t- Female Class\n\t\t\t- Woman Class\n\nA woman is part of the female class, and a female is part of the human class. If I had an object named *Sarah*, she would be a part of the woman class and inherit traits from the female and human classes.\n\nThe female is the superclass of the woman class, and the woman class is the subclass of the female class.\n\n\t- FruitClass\n\t\t- AppleClass\n\t\t\t- GrannySmithClass\n\nAn apple is a type of fruit. A grannysmith is a type of apple. The superclass of the apple class is? the subclass of the fruit class is?\n\n# METHOD\n\nA **function** that is **in a class** is called a method.\n\nClasses should be named like types of things. An apple is a type of fruit, so it would be in a fruit class.\n\nAnother way to name a class is as a subject. In math class you learn math. Methods in a math class might be Add() Subtract() Divide(), and Multiply(). Of course, you would have integer and float variables in it.\n\n# OBJECT\n\nOnce you have given a variable characteristics it then becomes an object. They call an object an **instance** of a class because it contains all of the properties or characteristics of the class.\n\nNow your human variable(object) can either Walk(), Talk(), Speak(), or Think() when you want it to. You might type:\n\n- human.Speak()\n\nNow your human variable can do the Speak() function.\n\nPrograming that uses objects is called Object Oriented Programming (OOP).\n\n# Instance\/Member Variable\n\nA **variable** defined **inside of a class** is called an **instance variable**. Also called a **member variable**\n\nAn apple is part of the fruit class, in which there are variables like taste, color, type etc. Taste, color, and type are instance variables. They are variables that belong to the fruit class.\n\n# MODULES\/LIBRARIES\n\nWhy bake bread from scratch when you can buy a loaf? **Collections of classes, functions and variables** made by other peope that you can use in your own program recipe are called modules\/libraries.\n\n# INTERACTIVITY\n\nInterativity is a way for **users** like you and me to **interact with** and change the vode of a **program** without having to open the code in an IDE and change variables or functions.\n\nFor example, when you select a number in the timer section of the clock app on your iPhone, you are actually changing the value of a ariable in the code. Let's say the name of that variable is *timer*.\n\nWhen you tap the \"Start\" button, you are starting a function (remember that functions do something to variables). If I had to guess, the start function counts down from the timer number.\n\nAll you had to do was scroll and tap to manipulte the code. You *interacted* with the program.\n\n# EVENTS, EVENT LISTENERS, EVENT HANDLERS\n\nWhen you **press a key** on your keyboard, that is an event. When you **click a button** on your mouse or **swipe or pinch** on your ipad, that is an **event**.\n\nThe **event listener** is a function that **detects the event**, and the **event handler** is a function that  **links that event** to a function or class in your program.\n\nEvents are what connect our physical actions to the didgital actions of the computer, making it interactive.\n\n# API (Application Programming Interface)\n\nAn **API** is a bunch of **access points** that allow your own program to **communicate with anothers' program**, without having direct access to their secret recipe.\n\nIn other words, if you want to make your own twitter app that can post to twitter, you have to use Twitter's API. Twitter has to give you a **key** to access certain parts of their API.\n\nAn API is a bunch of custom variables and functions that make up Twitter. Twitter allows you to use them to program for their program.\n\nThis keeps people from stealing the secret Twitter recipe of from hacking Twitter.\n\nhttp:\/\/markdownshare.com\/view\/eb975811-188e-4a9f-ab34-7a231dbfb4ee\nhttp:\/\/markdownshare.com\/edit\/aa620e66af991c60371fe1b6c9e3a264\nhttp:\/\/markdownshare.com\/delete\/aa620e66af991c60371fe1b6c9e3a264\n\n# COMPILE\nAfter you write your program you have to translate it back into something the computer actually understands (into machine language). This process is called **compiling**. A **compiler** is a program that compiles programs.\n\n# EXECUTE\nWhen you finally run your program, the computer executes it. In other words the instructions in the recipe are carried out by the computer.\n\n# PROGRAMMING LANGUAGES\n\n## HIGH-LEVEL LANGUAGES\nThe easier the language you program in is to understand by humans, the higher its level is (most of the time).\nA programming language like LUA is a high-level language. They say it is more \"**human-readable**\". \n\n## LOW-LEVEL LANGUAGES\nComputers cannot understand high-level programming languages. Computers understand what is called \"**machine language**.\" Machine language is the lowest level language. **Assembly** is the second lowest low-level programming language.\nAssembly is the middleman language between machine code and human-readable code.\n\n## COMPILED LANGUAGES\nA compiled programming language is a program that gets compiled (into machine language) and thereafter, read by the computer.\n- C\n- C++\n- BASIC\n- Lisp\n- Objective C\n- Pascal\n- COBOL\n\n## INTERPRETED LANGUAGES\nAn interpreted programming language is one that is not translated, but interpreted, by means of an **interpreter**. The interpreter executes the program directly, without having to translate it to machine code.\n- Java\n- Python\n- Ruby\n\n# ADDITIONAL INFO\n\n## Operating System\n-  An **Operating System** is a **big program** that **runs other programs** like:\n\t-  Windows\n\t-  Mac OSx \n\t-  Linux\n- There are even mobile operating systems:\n\t- IOS\n\t- Android\n\t- Windows RT\n\t\n## Virus\n-  A **Virus** is a **program that corrupts** other programs.\n\n## Hacker\n-  A **Hacker** is a **person** who **uses unconventional means** to access something. \n- There are three types of hackers\n\t- White Hat hackers\n\t- Grey Hat a hackers\n\t- Black Hat hackers\n\n## Pseudocode\n- Pseudocode-- false(fake) code, is the steps of a program written in plain English. No syntax is required. It's more of an outline.\n\n\n## Fork\n- A fork is when a person modifies your secret recipe(source-code), making it distinctly different) and creates a separate program. This usually creates a schism between users. \n- Forks usually happen when users or developers \n\n"}}},{"customTitle":"Store Help","colorLabel":2,"pauseWithoutShowingParameters":false,"subActions":[{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConvertMarkdown","parameters":{"tables":true,"superscript":true,"smartypants":true,"strikethrough":true,"metadata":false,"autolinks":true,"footnotes":true}},{"pauseBeforeRunning":false,"colorLabel":2,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionStoreVariable","parameters":{"name":"help","value":{"type":"advancedText","tokenRanges":{"{0, 1}":"Input"},"text":"?"}}},{"pauseBeforeRunning":false,"colorLabel":2,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}}],"class":"WorkflowActionCondition","pauseBeforeRunning":false,"parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":""},"expression1":{"type":"advancedText","tokenRanges":{},"text":""}}},{"customTitle":"Show Help","colorLabel":5,"pauseWithoutShowingParameters":false,"subActions":[{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionCustomUI","parameters":{"useEditorTheme":true,"presentationStyle":1,"ui":"[{\"class\":\"View\",\"attributes\":{\"border_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"tint_color\":\"RGBA(0.000000,0.478000,1.000000,1.000000)\",\"background_color\":\"RGBA(0.928571,0.905162,0.862245,1.000000)\",\"enabled\":true,\"action_workflow\":\"{\\\"actions\\\":[{\\\"class\\\":\\\"WorkflowActionSetUIControlValue\\\",\\\"pauseBeforeRunning\\\":false,\\\"customTitle\\\":\\\"\\\",\\\"parameters\\\":{\\\"viewName\\\":\\\"webview1\\\",\\\"text\\\":{\\\"tokenRanges\\\":{\\\"{0, 1}\\\":\\\"help\\\"},\\\"type\\\":\\\"advancedText\\\",\\\"text\\\":\\\"?\\\"}},\\\"pauseWithoutShowingParameters\\\":false}]}\",\"flex\":\"\"},\"frame\":\"{{0, 0}, {768, 960}}\",\"nodes\":[{\"class\":\"WebView\",\"attributes\":{\"tint_color\":\"RGBA(0.500000,0.500000,0.500000,1.000000)\",\"enabled\":true,\"flex\":\"WH\",\"action_workflow\":\"{\\\"actions\\\":[]}\",\"name\":\"webview1\",\"border_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"border_width\":0,\"background_color\":\"RGBA(0.928571,0.906020,0.862245,1.000000)\",\"uuid\":\"08CEC230-4212-4168-BF3C-EA510085C243\"},\"frame\":\"{{0, 0}, {768, 960}}\",\"nodes\":[]}]}]"}},{"pauseBeforeRunning":false,"colorLabel":5,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}}],"class":"WorkflowActionCondition","pauseBeforeRunning":false,"parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":""},"expression1":{"type":"advancedText","tokenRanges":{},"text":""}}},{"pauseBeforeRunning":false,"colorLabel":5,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}}],"class":"WorkflowActionCondition","pauseBeforeRunning":false,"parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":""},"expression1":{"type":"advancedText","tokenRanges":{},"text":""}}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}}],"pauseWithoutShowingParameters":false,"customTitle":"Tutorial","class":"WorkflowActionCondition","parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":"yes"},"expression1":{"type":"advancedText","tokenRanges":{"{0, 1}":"Input"},"text":"?"}}},{"pauseBeforeRunning":false,"colorLabel":2,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionShowHUD","parameters":{"HUDText":{"type":"advancedText","tokenRanges":{},"text":"To run an example, drag it above the stop action (not the entire group)\n"},"duration":2,"icon":1}},{"pauseBeforeRunning":false,"colorLabel":4,"pauseWithoutShowingParameters":false,"customTitle":"Beginner","class":"WorkflowActionCondition","parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":""},"expression1":{"type":"advancedText","tokenRanges":{},"text":""}}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Variables","class":"WorkflowActionRunScript","parameters":{"script":"### VARIABLES\n\n# A string\nname = 'Jackie'\n\n# An integer\nfavorite_number = 4\n\n# A float\nheight = 6.5\n\n# A boolean\namICool = True \n\n# You can assign a new value to a variable\namICool = False \n\n# An array\narray_of_colors = ['red','orange','yellow','green','blue','indigo','violet']\narray_of_numbers = [23,13.4,1,782]\nmixed_array = ['Zillow',34.9,True,798]\n\n# A dictionary\ndescription = {'eyeColor':'brown','physique':'muscled','demeanor':'confident'}\nprint description['eyeColor']\nprint description['physique']\nprint description['demeanor']\n\n### EXTRA\n\n# ID of a variable\nprint id(name)\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Printing","class":"WorkflowActionRunScript","parameters":{"script":"## PRINTING\n\nprint 'Hello'\n\nprint 'Hello','Editorial'\n\n# Concatenate (gives errors if not strings)\nprint 'Hello' + 'Folks'\n\n\nprint 27\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Integers","class":"WorkflowActionRunScript","parameters":{"script":"# INTEGERS\n\nnumber1 = 12\nnumber2 = 144\nnumber3 = \"67\"\n\n#Add\nprint number1 + number2\n\n#Subtract\nprint number2 - number1\n\n#Multiply\nprint number1 * number2\n\n#Divide\nprint number2\/number1\n\n#Exponents\nprint number2**number1\n#Same\nprint pow(number2,number1)\n\n#Square root\nprint number2**(1\/2.0)\n\n#Order of operations\nprint (number1 + number2) * 3 + (number1**3)\n\n# Increment an integer\nnumber1 = number1 + 1\nprint number1\n\n# Convert a string to an integer\nnumber3 = int(number3)\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Strings","class":"WorkflowActionRunScript","parameters":{"script":"# STRINGS\n\n## Empty string\nfirst_name = \"\"\nlast_name = \"\"\n\n\n## Asign a value to a string\nfirst_name = \"joe\"\nlast_name = \"shmo\"\noccupation = \"Truck Driver\"\n\n\n## Adding strings (concatenation)\nprint first_name + last_name\n\n## Adding a space between string variables\nprint first_name + \" \" + last_name\n\n## Starting a new line (escape characters)\nprint first_name + \"\\n\" + last_name \n\n## Adding variables inside of a string (string formatting)\nprint \"Hello %s\" %(first_name)\n\n## Multiple variables inside of a string\nprint \"Hello %s %s\" %(first_name,last_name)\n\n## There is a better way to format strings\ngreeting = 'Hello {name}, my name is {myname}'\nprint greeting.format(name='Joseph',myname='Joey')\n\n## Print a string several times\nprint first_name * 4\n\n## Get index of a string\n## Indices begin at 0\nprint first_name[0]\nprint first_name[1]\nprint first_name[2]\n\n## A multi-line string\n\"\"\"Multi-Line strings are sometimes used as multi-line comments, since python doesn't have syntax for multi-line comments.\"\"\"\n\n\n# STRING FUNCTIONS\nprint first_name.capitalize()\nprint len(occupation) \n\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Tuples","class":"WorkflowActionRunScript","parameters":{"script":"# TUPLES\n## Tuples are like lists, but cannot be changed (they are immutable).\n\nx = 0\ny = 1\n\n\n## Create a Tuple\nposition = (50,200)\n\n\n## Get tuple index\nprint position[x]\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Lists","class":"WorkflowActionRunScript","parameters":{"script":"# LISTS\n\n# Create a list\nClients = ['Cierra','Lisa','Ibrahim','Eric','Nancy','Terry','Sarah']\nprint Clients\n\nEmployees = ['Eric','Margaret','Paul','Ole','Yul']\nprint Employees\n\n### LIST FUNCTIONS\n# List Index\nprint Clients[0]\n\n# List index range\nprint Clients[0:4]\n\n# Append to a list\nClients.append('Joe')\nprint Clients\n#Same as:\n#Clients[len(Clients):] = ['Joe'].\n\n# Remove from a list\nClients.remove('Joe')\nprint Clients\n\n# Insert item into a list at a location\nClients.insert(0,'Lee')\nprint Clients\n\n# Reverse a list\nClients.reverse()\nprint Clients\n\n# Sort a list\nClients.sort()\nprint Clients\n\n# Remove an item at a location\nClients.pop(0)\nprint Clients\n\n# Return the index of an item in the list\nprint Clients.index('Lee')\n\n# Extend a list with another list\nClients.extend(Employees)\nprint Clients\n# Same as:\n#Clients[len(Clients):] = Clients\n\n# Count how many times an item appears in a list\nprint Clients.count('Lisa')\n\n\n### EXTRA\n\n# Loop through a list\nfor item in Clients:\n\tprint item\n\t\n#Remove a list from a list\nfor i in Clients:\n\t\tif i in Employees:\n\t\t\tClients.remove(i)\nprint Clients\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Dictionaries","class":"WorkflowActionRunScript","parameters":{"script":"\n### DICTIONARIES\n\n# Create a dictionary (dictionary_name = {key:value})\ninventory = {'light':'flashlight'}\nprint inventory\n\n\n# Print the value of a key\nprint inventory['light']\n\n\n# Update Dictionary \ninventory.update({'map':'New York'})\ninventory.update({'phone':'Flip Phone'})\nprint inventory\n\n\n# Update the key if it is already in the dictionary\ninventory.update({'map':'Atlanta'})\ninventory.update({'map':'New York'})\nprint inventory['map']\n\n\n# Get all keys (outputs as a list)\nprint inventory.keys()\n\n\n# Get all values (ouptuts as a list)\nprint inventory.values()\n\n\n# Copy dictionary items as a list of tuples\n# Basically converts a dictionary to a a list of tuples.  \nprint inventory.items()\n\n\n# Length of a dictionary\nprint len(inventory)\n\n\n# Delete inventory item\ndel inventory['map']\nprint inventory\n\n\n# Iterate over dictionary\n#print iter(inventory)\n#print inventory.iterkeys()\n#print inventory.itervalues()\n\n# Remove item, and returns its value\ninventory.pop('phone')\n# Alternately: inventory.popitem()\nprint inventory\n\n# View keys of a dictionary\nprint inventory.viewkeys()\n\n# View values of a dictionary\nprint inventory.viewvalues()\n\n# View all items in a dictionary\nprint inventory.viewitems()\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Conditonals","class":"WorkflowActionRunScript","parameters":{"script":"### CONDITIONALS\n\non = True\nnumber = 51\n\n# If equal to\nif on == True:\n\tprint on\n\n# Same (for booleans)\nif on:\n\tprint on\n\n# If not equal to\nif on != False:\n\tprint on\n\n# If greater than\nif number > 23:\n\tprint number\n\n# If less than\nif number < 77:\n\tprint number\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Booleans (BEG)","class":"WorkflowActionRunScript","parameters":{"script":"## BOOLEANS (BEG)\n\nlocation = 0\n\t\nif location == 50:\n\tprint 'Halfway there.'\nelif location > 50 and location < 100:\n\tprint 'More than halfway there.'\nelif location < 50 and location > 0:\n\tprint 'Less than halfway there.'\nelif location == 100:\n\tprint \"You are there!\"\nelif location < 0:\n\tprint \"You're moving in the wrong direction!\"\nelif location > 100:\n\tprint \"You've gone too far.\"\nelif location ==  0:\n\tprint \"You aren't moving!\"\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"While Loop","class":"WorkflowActionRunScript","parameters":{"script":"### WHILE LOOP\nage = 0\nold_age = 30\n\nwhile age < old_age:\n\tprint 'Still young @ ' + str(age)\n\tage = age + 1\nif age ==  old_age:\n\tprint \"You've reached the pinnacle @ \" + str(age)\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Functions","class":"WorkflowActionRunScript","parameters":{"script":"### FUNCTIONS\n# A string\nname = 'Jackie'\n\n# An integer\nfavorite_number = 4\n\n# A float\nheight = 6.553\n\n# A boolean\namICool = True \n\n# You can assign a new value to a variable\namICool = False \n\n# An array\narray_of_colors = ['red','orange','yellow','green','blue','indigo','violet']\narray_of_numbers = [23,13.4,1,782]\nmixed_array = ['Zillow',34.9,True,798]\n\n\n### BUILT-IN FUNCTIONS\n# print() - Prints values to the screen\nprint(name)\nprint(favorite_number)\n\n# Two ways to print\nprint height\nprint amICool\n\nprint array_of_colors\nprint array_of_numbers\n\n\n# raw_input() - Gets input from the user\noccupation = raw_input('What is your occupation? ')\nprint 'You are a ' + occupation\n\n# len() - Gets the length of a string\nprint(len(name))\n\n# type() - Gets the type of a value\nprint(type(height))\n\n# str() - Converts a value to a string\nprint(type(str(height)))\n\n# int() - Converts a value to an integer\nprint(type(int(height)))\n\n# list() - Converts a value to a list\n\n# float() - Converts a value to a float\n\n# round() - Rounds a number to a given percision\nprint(round(height,2))\nprint(round(height,1))\n\n\n# pow() - Raises a number or integer to a power \npower = pow(height,favorite_number)\nprint(power)\n\n# sum()- sum of all elements in an iterable \nprint 'sum of array is',sum(array_of_numbers)\n\n# help() - prints Python help information\n#help() commented out for now\n\n\n# Create a function\ndef MyFunction():\n\tprint name\n\tprint height\n\tprint favorite_number\n\n# Use\/Call a function\nMyFunction()\n\n## Function arguments\n# One argument\ndef Write(first_name):\n\tprint first_name\n\t\nWrite('Ole')\n\n# More than one argument (separated by commas)\ndef Add(a,b):\n\tprint 'The sum is ' +  str(a + b)\n\nAdd(2,3)\nAdd(2.89,34.2)\n\n# Function return\ndef Multiply(a,b):\n\tproduct = a*b\n\treturn product\n\nprint 'The product is',Multiply(2,89)\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"For loop","class":"WorkflowActionRunScript","parameters":{"script":"### FOR LOOP\n\nprint range(0,10)\n\n# Loop over a range\nfor i in range(0,10):\n\tprint i\n# For each element inside of the range, print the element.\n\n# Loop over a string\nname = 'Joseph'\nfor letter in name:\n\tprint letter\n\n# Loop over a list\nmy_list = ['eggs','milk','bread']\nfor item in my_list: \n\tprint item\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Classes","class":"WorkflowActionRunScript","parameters":{"script":"### CLASSES\n\n# A class\nclass Fruit():\n\tdef __init__(self,color,taste,type='Fruit'):\n\t\t\n\t\t# Member Variables\n\t\tself.color = color\n\t\tself.taste = taste\n\t\tself.type = type\n\t\n\t# A Method\t\n\tdef eat(self, item):\n\t\tprint \"Eating \" + item\n\n# An object\napple = Fruit(\"red\",\"sweet\")\n\n# Accessing member variables\nprint(apple.color)\nprint(apple.taste)\nprint(apple.type) # default value. a non-required argument.\n\n# Using methods\napple.eat(\"vegetables\")\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Try & Accept","class":"WorkflowActionRunScript","parameters":{"script":"# Try to do something, and if there is an error, do something else\ntry:\n    print \"Hello World\"\nexcept:\n\tprint('Goodbye World')\n\n# Types of exceptions\nexceptions= \"\"\"except IOError:\n    print('An error occured trying to read the file.')\n    \nexcept ValueError:\n    print('Non-numeric data found in the file.')\n\nexcept ImportError:\n    print \"NO module found\"\n    \nexcept EOFError:\n    print('Why did you do an EOF on me?')\n\nexcept KeyboardInterrupt:\n    print('You cancelled the operation.')\n\nexcept:\n    print('An error occured.')\n\"\"\"\n\n\n"}},{"pauseBeforeRunning":false,"colorLabel":4,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}},{"customTitle":"Intermediate","colorLabel":3,"pauseWithoutShowingParameters":false,"subActions":[{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Booleans","class":"WorkflowActionRunScript","parameters":{"script":"# BOOLEANS\n\ncold = False\nhot = False\nnormal = False\n\ncloudy = False\npartly_cloudy = False\nsunny = False\n\n\ntemp = 12\novercast = 68\n\n\nif temp < 65:\n\tcold = True\n\t\n\nif temp > 85:\n\thot = True\n\n\nif temp > 65 and temp < 85:\n\tnormal = True\n\n\t\nif overcast > 55:\n\tcloudy = True\n\n\nif overcast < 30:\n\tsunny = True\n\n\t\nif overcast > 30 and overcast < 55:\n\tpartly_cloudy = True\n\t\n\t\nif (cold and cloudy) and (cold and partly_cloudy):\n\tprint 'Its gonna be a yucky day'\nelse:\n\tprint 'Its an okay day out!'\n\t\n\t\nif (cold and cloudy) or (cold and partly_cloudy):\n\tprint 'Its gonna be a yucky day'\nelse:\n\tprint 'Its an okay day out!'\n\t\n\t\nif hot and sunny:\n\tprint 'Its gonna be steaming!!'\n\t\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Classes (INT)","class":"WorkflowActionRunScript","parameters":{"script":"class Animal():\n\t# two underscores mean the varianle is private\n\t__name = \"\"\n\t__height = 0\n\t__weight = 0\n\t__sound = ''\n\tdef __init__(self,name):\n\t\tself.__name = name\n\t\t\n\tdef get_name():\n\t\tprint name\n\na = Animal('a')\n\na.get_name()\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Conditionals (INT)","class":"WorkflowActionRunScript","parameters":{"script":"# CONDITIONALS\n\nadult = False\nminiumum_age = 18\n\ndef CheckAge():\n\tage = int(raw_input('How old are you: '))\n\tif age >= miniumum_age:\n\t\tadult = True\n\t\tprint 'You are legal'\n\telif age < miniumum_age:\n\t\tprint 'That is not old enough'\n\t\tadult = False\n\t\n\tif not adult:\n\t\tCheckAge()\nCheckAge()\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Function Arguments","class":"WorkflowActionRunScript","parameters":{"script":"def push_argument(*argparams):\n\tprint argparams\npush_argument('a','b')\n\n\ndef push_keys(**keyparams):\n\tprint keyparams\npush_keys(ok='right')\n\n\ndef default_parameters(a='A',b='B'):\n\tprint a,b\ndefault_parameters(a='Not A',b='Not B')\n\n\ndef fixed_passed_parameters(a,b):\n\tprint a,b\nfixed_passed_parameters('a','b')\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"SETS ","class":"WorkflowActionRunScript","parameters":{"script":"# Sets\n#import dis\n\nA = [1,2,3]\nB = [4,5,6,3,2]\nC = ['a','b',3]\n\n### BORROWED CODE\n#http:\/\/stackoverflow.com\/questions\/3852780\/python-intersection-of-multiple-lists\ndef getIntersection(*S):\n    sets = iter(map(set, S))\n    result = sets.next()\n    for s in sets:\n        result = result.intersection(s)\n    return list(set(result))\nprint getIntersection(A,B,C)\n### END BORROWED CODE\n\n\ndef getUnion(*S):\n\tresult = set().union(*S)\n\treturn list(set(result))\nprint getUnionS(A,B,C)\n"}},{"pauseBeforeRunning":false,"colorLabel":3,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}}],"class":"WorkflowActionCondition","pauseBeforeRunning":false,"parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":""},"expression1":{"type":"advancedText","tokenRanges":{},"text":""}}},{"pauseBeforeRunning":false,"colorLabel":1,"pauseWithoutShowingParameters":false,"customTitle":"Advanced","class":"WorkflowActionCondition","parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":""},"expression1":{"type":"advancedText","tokenRanges":{},"text":""}}},{"pauseBeforeRunning":false,"colorLabel":1,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}},{"pauseBeforeRunning":false,"subActions":[{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Variables are Nouns","class":"WorkflowActionRunScript","parameters":{"script":"# -*- coding: utf-8 -*-\n# Variables are Nouns\nimport string\n\nperson = 'Jackie Barns'\n\nplace = 'AT&T®'\n\nthing = 'telephone'\n\narea_code = 770\nprefix = 456\nline_number = 1234\n\nnumber = str(area_code) + str(prefix) + str(line_number)\n\nx = string.split(number,None,3)\n\nfor i in x:\n\tprint string.joinfields(i,'...')\n\ninfo = '%s works at %s where they provide service to a %s' % (person,place,thing)\n\nprint info\nprint number\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Strings","class":"WorkflowActionRunScript","parameters":{"script":"#String Funtions\nimport string\n\nname = 'john jacob jingleheimer schmidt'\n\nplace = 'Wasington D.C.'\nprint place\n\nplace = place.lower()\nprint place\n\nplace = place.upper()\nprint place\n\n## Format\nformatted_string ='My name is %s' % ('Mr Editorial')\nprint formatted_string\n\nmultiVariable_formatted_string = \"He crossed the %(blank)s at %(time)d o'clock\" % {'blank':'street','time':12}\nprint multiVariable_formatted_string\n\n\n## Classes\nplace = string.capitalize(place)\nprint place\n\nsplit_name = string.split(name,None,-1)\nprint split_name\n\njoined_split_name = string.join(split_name)\nprint joined_split_name\n\nprint string.capwords(joined_split_name,None)\n\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Functions (INT)","class":"WorkflowActionRunScript","parameters":{"script":"# FUNCTIONS (INTERMEDIATE)\nwelcome = 'Welcome to Editorial! '\nresponse = raw_input('How are you today? ')\ncomputer_response = 'It seems you are ' + response\n\n# Create a function\ndef PrintSomething():\n\tprint 'Hi'\n\t\n# Call the function\nPrintSomething()\n\n# Function arguments\/parameters\ndef PrintArgument(argument):\n\tprint argument\n\nPrintArgument(welcome)\nPrintArgument(computer_response)\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionRunScript","parameters":{"script":"# -*- coding: utf-8 -*-\n\n# BETTER WAY\ninitial_position = 0\ntemperature = 0\n\n\ndef CheckTemperature(final_destination,temperature=0,location=''):\t\n\twhile temperature <= final_destination:\n\t\t\n\t\tdiff = final_destination-temperature\n\t\ttemperature = temperature + 1\n\t\thalfway_point = (final_destination-initial_position)\/2\n\t\tinfo = str(temperature) + ' is ' + location + str(diff) + ' More to go!'\n\t\t\n\t\tif temperature == halfway_point:\n\t\t\tlocation= 'Halfway there.'\n\t\t\tprint info\n\t\telif temperature > halfway_point and temperature < final_destination:\n\t\t\tlocation= 'More than halfway there.'\n\t\t\tprint info\n\t\telif temperature < halfway_point and temperature > initial_position:\n\t\t\tlocation= 'Less than halfway there.'\n\t\t\tprint info\n\t\telif temperature == final_destination:\n\t\t\tlocation= \"There!\"\n\t\t\tprint info\n\t\telif temperature == initial_position:\n\t\t\tlocation= \"Move it bub!!\"\n\t\t\tprint info\n\t\telif temperature < initial_position:\n\t\t\tlocation= \"Negative!\"\n\t\t\tprint info\n\t\telif temperature > final_destination:\n\t\t\tlocation= \"Too far.\"\n\t\t\tprint info\n\t\tif temperature >= (temperature-1):\n\t\t\tprint 'going in the right direction'\n\t\telse:\n\t\t\tprint 'Wrong way Josè!'\n\nCheckTemperature(100)\nprint '\\n'\nCheckTemperature(45)\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Boolean (ALT)","class":"WorkflowActionRunScript","parameters":{"script":"# -*- coding: utf-8 -*-\n\n# BETTER WAY\n\ntemperature = -10\n\ninitial_position = 0\nfinal_destination = 100\nhalfway_point = (final_destination-initial_position)\/2\nlocation = ''\n\t\nwhile temperature < final_destination:\n\tdiff = final_destination-temperature\n\ttemperature = temperature + 1\n\tif temperature == halfway_point:\n\t\tlocation= 'Halfway there.'\n\t\tprint str(temperature) + ' is ' + location + str(diff) + ' More to go!'\n\telif temperature > halfway_point and temperature < final_destination:\n\t\tlocation= 'More than halfway there.'\n\t\tprint str(temperature) + ' is ' + location + str(diff) + ' More to go!'\n\telif temperature < halfway_point and temperature > initial_position:\n\t\tlocation= 'Less than halfway there.'\n\t\tprint str(temperature) + ' is ' + location + str(diff) + ' More to go!'\n\telif temperature == final_destination:\n\t\tlocation= \"There!\"\n\t\tprint str(temperature) + ' is ' + location + ' No more to go!'\n\telif temperature < initial_position:\n\t\tlocation= \"Negative!\"\n\t\tprint str(temperature) + ' is ' + location + str(diff) + ' More to go!'\n\telif temperature > final_destination:\n\t\tlocation= \"Too far.\"\n\t\tprint str(temperature) + ' is ' + location + str(diff) + ' More to go!'\n\tif temperature >= (temperature-1):\n\t\tprint 'going in the right direction'\n\telse:\n\t\tprint 'Wrong way Josè!'\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"class INT","class":"WorkflowActionRunScript","parameters":{"script":"# Import the math class\nimport math\n\nnumber = 2272\nprint math.sqrt(number)\n\nchoice = raw_input('Take the square root of what number? ')\nprint math.sqrt(float(choice))\n# The sqrt() function only takes floats\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Programming Tutorial","class":"WorkflowActionRunScript","parameters":{"script":"# the 'notes' variable is just a multiline-string\n\nnotes = '''\nThese concepts will be demonstrated in this program \n\n- VARIABLES \n- STATEMENTS\n- FUNCTIONS\n- ARGUMENTS\n- ALGORITHMS\n- DEBUGGING\n- SOURCE CODE\n- SYNTAX\n- IDE\n- MEMORY\n\t- ROM\n\t- RAM\n- FLOW CONTROL\n- CONDITIONAL STATEMENTS\n\t- If\n\t- else if\n\t- else\n- LOOPS\n\t- While Loop\n\t- For Loop\n- DATA TYPEE\n\t- String\n\t- Integer\n\t- Float\n\t- Character\n\t- Boolean\n\t- Array\n- CLASSES\n\t- SUPERCLASSES\n\t- SUBCLASSES\n - METHOD\n- OBJECTS\n\t- OOP\n- MODULES\/LIBRARIES\n- INTERACTIVITY\n\t- EVENTS, \n\t- EVENT LISTENERS\n\t- EVENT HANDLERS\n- API (Application Programming Interface)\n'''\n# Python doesnt have syntax for multi-line comments.\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Info","class":"WorkflowActionRunScript","parameters":{"script":"#Character\ngrade = \"A\"\n\n# String\nname = 'Joey'\nprint name\n\n#Integer\nfavorite_number = 24\nprint favorite_number\n\n#Float\nheight = 6.3\n\n#Boolean\nyou_are_tall = False\n\n#List\ncolors_of_the_rainbow = ['Red','Orange','Yellow','Greeen','Blue','Indigo','Violet']\n\nprint colors_of_the_rainbow\nprint colors_of_the_rainbow[0]\nprint colors_of_the_rainbow[-1]\n\n#Dictionary\ncar = {'make':'Pontiac','model':'Firebird','color':'Red'}\n\nprint car['color']\nprint car['make']\nprint car['model']\n\nprint car['color'] + car['make'] + car['model']\n\ncar = {'make':'Pontiac ','model':'Firebird ','color':'Red '}\n\nprint car['color'] + car['make'] + car['model']\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Fuzzy Temperature","class":"WorkflowActionRunScript","parameters":{"script":"# Fuzzy Logic \n\n# fuzzify a range of values as a state\n\nimport ui\n\ndef update(sender):\n\tvalue = slider.value * 100\n\tlabel.text = str(value)\n\t\n\tdef fuzzify(min,max,condition):\n\t\tmembership = (value-min)\/(max-min)\n\t\tif value > min and value < max:\n\t\t\tprint condition,membership\n\t\t\tstate.text = condition + ' to the ' + str(round(membership,2)) + ' degree'\n\tprint fuzzify(75,85,\"warm\")\n\tprint fuzzify(0,30,\"freezing\")\n\t\n\nview = ui.load_view()\nslider = view['slider']\nlabel = view['label']\nstate = view['state']\nslider.continuous=True \n\nview.present('sheet')\n\n\n","ui":"[{\"class\":\"View\",\"attributes\":{\"background_color\":\"RGBA(1.000000,1.000000,1.000000,1.000000)\",\"tint_color\":\"RGBA(0.000000,0.478000,1.000000,1.000000)\",\"enabled\":true,\"border_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"flex\":\"\"},\"frame\":\"{{0, 0}, {540, 575}}\",\"nodes\":[{\"class\":\"Slider\",\"attributes\":{\"enabled\":true,\"flex\":\"W\",\"name\":\"slider\",\"value\":0.5,\"action\":\"update\",\"border_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"uuid\":\"0B50A76F-B384-4A0D-8D86-86C6D50FE5D7\"},\"frame\":\"{{170, 187}, {200, 34}}\",\"nodes\":[]},{\"class\":\"Label\",\"attributes\":{\"font_size\":17,\"enabled\":true,\"text\":\"50\",\"flex\":\"\",\"name\":\"label\",\"border_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"text_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"alignment\":\"center\",\"uuid\":\"9D4CB1AB-85B9-4FA0-B7BC-316F7D7F899E\"},\"frame\":\"{{195, 139}, {150, 32}}\",\"nodes\":[]},{\"class\":\"Label\",\"attributes\":{\"font_size\":29,\"enabled\":true,\"text\":\"Label\",\"flex\":\"\",\"name\":\"state\",\"border_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"text_color\":\"RGBA(0.000000,0.000000,0.000000,1.000000)\",\"alignment\":\"center\",\"uuid\":\"75BBE3E8-BACF-4008-8D36-C6FF73A46CD4\"},\"frame\":\"{{75, 57}, {389, 48}}\",\"nodes\":[]}]}]"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Load and save","class":"WorkflowActionRunScript","parameters":{"script":"def saved(**object):\n\tvar = object\n\treturn var\n\n\nstored = saved(name='Joe')\n\ndef load(x):\n\tprint x\n\nload(stored['name'])\n\n\n# Another simpler method\n\ndef store(**object): # ** creates a keyword argument\n\tvar = object\n\treturn var\n\t\nstored = store(name='Joe',occupation='Janitor')\n\nprint stored['name']\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}}],"pauseWithoutShowingParameters":false,"customTitle":"Other","class":"WorkflowActionCondition","parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":""},"expression1":{"type":"advancedText","tokenRanges":{},"text":""}}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Ignore duplicates","class":"WorkflowActionRunScript","parameters":{"script":"letters = ['A','B','C','D','E']\nnums = [1,2,3,4,5]\n\ndef append_to_other_list(A,B):\n\tfor item in A:\n\t\tif item not in B:\n\t\t\tB.append(item)\n\nappend_to_other_list(letters,nums)\nprint nums\n"}},{"pauseBeforeRunning":false,"subActions":[{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"Interpret","class":"WorkflowActionRunScript","parameters":{"script":"# INTERPRET A SENTENCE\nsentence1 = 'Hello World'\nsentence2 = \"I am not afraid\"\nsentence3 = 'I am okay'\nsentence4 = 'You are very cool'\nsentence5 = 'The house is far away. I am so scared'\n\nassocation = {\n'Hello':'Hola',\n'World':'Mundo',\n'I':'You',\n'am':'are',\n'very':'extremely',\n'far away':'not close at all',\n'afraid'or'scared':'fearful'\n}\n\ndef interpretationOf(sentence):\n\tfor word in assocation:\n\t\tif word in sentence:\n\t\t\tsentence = sentence.replace(word,assocation[word])\n\tinterpretation = sentence\n\treturn interpretation\n\nprint sentence2\nprint interpretationOf(sentence2) + '\\n'\nprint sentence1\nprint interpretationOf(sentence1)\nprint interpretationOf(sentence3)\nprint interpretationOf(sentence4)\nprint interpretationOf(sentence5)\n\ndef hasNegatives(sentence):\n\tif 'not' or 'Not' in interpretationOf(sentence):\n\t\treturn True \n\telse:\n\t\treturn False \n\nprint hasNegatives(sentence5)\nprint hasNegatives(sentence1)\n\n\n\n\n# SET VALUE GIVEN TWO STATES\nhot = True \nsunny = True \ncold = False \ncloudy = False \nsnowing = True \n\nclothingWhenIts = {\n    (hot, sunny): \"shorts\",\n    (cold, cloudy): \"jeans\",\n    (cold, snowing): \"jacket\"\n}\n\nprint clothingWhenIts[hot,sunny]\nprint clothingWhenIts[cold,cloudy]\nprint clothingWhenIts[cold,snowing]\n\n\n\n\n# RUN FUNCTION WHEN 2 STATES ARE TRUE\ndef ifIts(a,b,function):\n\tif a ==  True  and b == True :\n\t\tfunction()\n\telse:\n\t\tprint 'One or the other is not true.'\n\ndef goOutside():\n\tprint 'Yay! Going outside!'\n\t\nifIts(hot,sunny,goOutside)\n\n\n"}},{"pauseBeforeRunning":false,"pauseWithoutShowingParameters":false,"customTitle":"","class":"WorkflowActionConditionEnd","parameters":{}}],"pauseWithoutShowingParameters":false,"customTitle":"AI","class":"WorkflowActionCondition","parameters":{"comparisonType":0,"expression2":{"type":"advancedText","tokenRanges":{},"text":""},"expression1":{"type":"advancedText","tokenRanges":{"{0, 1}":"Input"},"text":"?"}}}]}